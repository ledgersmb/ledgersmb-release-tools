#!/usr/bin/ksh

#set -x
# automatically convert tag_release to upper case
typeset -u tag_release

URL="git@github.com:ledgersmb/LedgerSMB.git"
addn_URL=""
URL_docker="git@github.com:ledgersmb/ledgersmb-docker.git"
GH_api="https://api.github.com/repos"
branch=""
source_branch=""
release_version=""
new_dev_version=""
checkout_dir="LedgerSMB"
release_key="B7626A90FA0F515B323C8F5C39A629558DA0AF10"
dl_base_dir="/www/vhosts/download.ledgersmb.org/public_html/f"
dl_tagged_dir="Releases"
dl_untagged_dir="Beta Releases"
pod_base_dir="/www/vhosts/docs.ledgersmb.org/public_html/perl-api"
tag_release="Y"
with_docker=""


release_parameter_file=""
github_release_url=""
locale_paths=""
LedgerSMBpm_path=""


#====================== From: https://stackoverflow.com/a/57021646

# Implement a csh-like directory stack in ksh
#
# environment variable dir_stack contains all directory entries except
# the current directory

unset dir_stack
export dir_stack


# Three forms of the pushd command:
#    pushd        - swap the top two stack entries
#    pushd +3     - swap top stack entry and entry 3 from top
#    pushd newdir - cd to newdir, creating new stack entry

function pushd
{
   sd=${#dir_stack[*]}  # get total stack depth
   if [ $1 ] ; then
      if [ ${1#\+[0-9]*} ] ; then
         # ======= "pushd dir" =======

         # is "dir" reachable?
         if [ `(cd $1) 2>/dev/null; echo $?` -ne 0 ] ; then
            cd $1               # get the actual shell error message
            return 1            # return complaint status
         fi

         # yes, we can reach the new directory; continue

         (( sd = sd + 1 ))      # stack gets one deeper
         dir_stack[sd]=$PWD
         cd $1
         # check for duplicate stack entries
         # current "top of stack" = ids; compare ids+dsdel to $PWD
         # either "ids" or "dsdel" must increment with each loop
         #
         (( ids = 1 ))          # loop from bottom of stack up
         (( dsdel = 0 ))        # no deleted entries yet
         while [ ids+dsdel -le sd ] ; do
            if [ "${dir_stack[ids+dsdel]}" = "$PWD" ] ; then
               (( dsdel = dsdel + 1 ))  # logically remove duplicate
            else
               if [ dsdel -gt 0 ] ; then        # copy down
                  dir_stack[ids]="${dir_stack[ids+dsdel]}"
               fi
               (( ids = ids + 1 ))
            fi
         done

         # delete any junk left at stack top (after deleting dups)

         while [ ids -le sd ] ; do
            unset dir_stack[ids]
            (( ids = ids + 1 ))
         done
         unset ids
         unset dsdel
      else
         # ======= "pushd +n" =======
         (( sd = sd + 1 - ${1#\+} ))    # Go 'n - 1' down from the stack top
         if [ sd -lt 1 ] ; then (( sd = 1 )) ; fi
         cd ${dir_stack[sd]}            # Swap stack top with +n position
         dir_stack[sd]=$OLDPWD
      fi
   else
      #    ======= "pushd" =======
      # swap only if there's a value to swap with
      if [ ${#dir_stack[*]} = "0" ]; then
         echo "ksh: pushd: no other directory" >&2
      else
         cd ${dir_stack[sd]}       # Swap stack top with +1 position
         dir_stack[sd]=$OLDPWD
      fi
   fi
}

function popd
{
   sd=${#dir_stack[*]}
   if [ $sd -gt 0 ] ; then
      cd ${dir_stack[sd]}
      unset dir_stack[sd]
   else
      cd ~
   fi
}

function dirs
{
   echo "0: $PWD"
   sd=${#dir_stack[*]}
   (( ind = 1 ))
   while [ $sd -gt 0 ]
   do
      echo "$ind: ${dir_stack[sd]}"
      (( sd = sd - 1 ))
      (( ind = ind + 1 ))
   done
}

#------------------------- End from: https://stackoverflow.com/a/57021646


function help {
    name=$(basename $0)
    cat - <<EOF
Usage:
   $name [options] <branch>[:<src-branch>] <version> <next-version>

Parameters:
  branch       The branch to create the release on
  src-branch   (optional) Branch with additional commits to include
  version      The version number of the release
  next-version The version to set on the release branch after release

Options:
  --addn-repo  Additional repo, in case <src-branch> is not in the main repo
  --debug      Runs the script in debugging mode (very, very verbose)
  --force-accept-version-update
  --with-*     Enable feature '*'
  --without-*  Disable feature '*'

Features:
  docker       Publishes docker images
               Tagged releases include this option; others don't

EOF
}

# 'process_arguments' wants POSIX semantics: share variables
process_arguments() {

    stop_processing=
    while [[ $# -ne 0 && -z "$stop_processing" ]]
    do
        case "$1" in
            --addn-repo)
                addn_URL="$2"
                shift 2
                ;;
            --debug)
                debug_script=yes
                shift
                ;;
            --force-accept-version-update)
                force_accept_version_update=yes
                shift
                ;;
            --with-*)
                option=${1#--with-}
                shift
                case "$option" in
                    docker)
                        with_docker="yes"
                        ;;
                    *)
                        echo "Unrecognized option '$option'"
                        exit 1
                        ;;
                esac
                ;;
            --without-*)
                option=${1#--without-}
                shift
                case "$option" in
                    docker)
                        with_docker="no"
                        ;;
                    *)
                        echo "Unrecognized option '$option'"
                        exit 1
                        ;;
                esac
                ;;
            --*)
                echo "Error: unknown script argument $1"
                exit
                ;;
            *)
                stop_processing="yes"
                ;;
        esac
    done

    if [[ $# -eq 3 ]]
    then
        branch="$1"
        release_version="$2"
        new_dev_version="$3"
    else
        echo "Error: Incorrect number of arguments: $# found, 3 expected"
        help
        exit 1
    fi
    if [[ "$branch" == *":"* ]]
    then
        source_branch=${branch#*:}
        branch=${branch%:*}
    else
        source_branch="$branch"
    fi

    release_parameter_file=~/ledgersmb-$branch-release-parameters
}

# 'load_configuration' wants POSIX semantics: share variables
load_configuration() {
    [[ -f ~/.lsmb-dockerhub-releases ]] && source ~/.lsmb-dockerhub-releases
    [[ -f ~/.lsmb-ghcr-releases ]] && source ~/.lsmb-ghcr-releases

    if [[ ! -f ~/.lsmb-github-releases ]]; then
        fail "Missing configuration file ~/.lsmb-github-releases!"
    else
        source ~/.lsmb-github-releases

        [[ -n "$github_user" ]] || fail "variable 'github_user' not defined! please define in ~/.lsmb-github-releases"
        [[ -n "$github_token" ]] || fail "variable 'github_token' not defined! please define in ~/.lsmb-github-releases"
    fi

    if [[ -n $(echo "$release_version" | grep -- "-") ]]; then
        echo "Version modifier detected (rc/beta/...).
Modified versions don't get tagged. Force tag? [y/N]"
        read tag_release
    fi

    if [[ "$tag_release" == "Y" && -z "$with_docker" ]]
    then
        with_docker="yes"
    fi
}

function add_release_parameter {
    cat <<-EOF >> $release_parameter_file
$1="\$(cat <<'EOT'
$2
EOT
)"
EOF
}

function fail {
   echo -e "$1\n" >&2
   exit 1
}

# 'verify_dependency' wants POSIX semantics: share variables
verify_dependency() {
   which_executable=$(which $1)
   eval $1="$which_executable"
   if [[ -z "$which_executable" ]]; then
      fail "Missing dependency: $1"
   fi
}

# 'verify_dependencies' wants POSIX semantics: share variables
verify_dependencies() {
   verify_dependency "find"
   verify_dependency "gpg"
   verify_dependency "git"
   verify_dependency "sed"
   verify_dependency "grep"
   verify_dependency "tar"
   verify_dependency "perl"
   verify_dependency "mktemp"
   verify_dependency "less"
   verify_dependency "gzip"
   verify_dependency "awk"
   verify_dependency "sha256sum"
   verify_dependency "scp"
   verify_dependency "sftp"
   verify_dependency "sudo"
   verify_dependency "tx"
   verify_dependency "make"
   verify_dependency "msgmerge"
   verify_dependency "msguniq"
   verify_dependency "curl"
   verify_dependency "jq"
   verify_dependency "cat"
   verify_dependency "date"
   verify_dependency "createdb"
   verify_dependency "postgresql_autodoc"
   verify_dependency "psql"
   verify_dependency "uuid"
   verify_dependency "docker"
}

function verify_release_key {
   if [[ -z $($gpg --list-secret-keys "$release_key") ]] ; then
     fail "No key with ID '$release_key' (release key) available!"
   fi
}

function failure_cleanup {
    rm -rf "$our_workspace"
    rm -rf "$docker_workspace"
    if [[ -n "$upload_staging" ]]
    then
        echo "cd '$upload_staging'
-rm 'ledgersmb-$release_version.tar.gz.asc'
-rm 'ledgersmb-$release_version.tar.gz'
cd ..
rmdir '$upload_staging'
" | $sftp -b - "lsmb-uploader@download.ledgersmb.org"
    fi
}

# 'verify_dependencies' wants POSIX semantics: share traps
setup_workspace() {
   our_workspace=$($mktemp -d)
   docker_workspace=$($mktemp -d)
   trap "failure_cleanup" TERM EXIT
}

function populate_workspace {
    trap 'fail "Failed to check out branch ''$branch'' from ''$URL''!"' ERR

    olddir=$PWD
    cd $our_workspace
    $git clone --recursive --depth=50 --single-branch \
         --branch "$branch" "$URL" "$checkout_dir"

    if [[ -n "$addn_URL" || "$branch" != "$source_branch" ]]
    then
        trap 'fail "Failed to pull ''$source_branch'' from ''$addn_URL''"' ERR

        [[ -z "$addn_URL" ]] && addn_URL="$URL"
        cd "$checkout_dir"
        $git remote add alt "$addn_URL"
        $git pull --ff-only alt "$source_branch"
    fi

    trap 'fail "Failed to check out branch ''$branch'' from ''$URL''!"' ERR
    cd $olddir

    if test -e "$our_workspace/$checkout_dir/LedgerSMB.pm" ;
    then
        # sets parent variable
        LedgerSMBpm_path="LedgerSMB.pm"
    else
        # sets parent variable
        LedgerSMBpm_path="lib/LedgerSMB.pm"
    fi
    if test -e "$our_workspace/$checkout_dir/UI/src/locales" ;
    then
        # sets parent variable
        locale_paths="locale UI/src/locales"
    else
        # sets parent variable
        locale_paths="locale"
    fi
    echo "LedgerSMB.pm found at $LedgerSMBpm_path"
}

function populate_docker_workspace {
    pushd "$docker_workspace"
    trap "fail \"Failed to check out (docker) branch '$branch' from '$docker_URL'!\"" ERR
    $git clone --recursive --single-branch --branch "$branch" "$URL_docker" "$docker_workspace/docker"
    popd
}

function update_database_schema {
    pushd "$our_workspace/$checkout_dir"
    trap "fail \"Failed to update database schema documentation\"" ERR
    $sudo -Hiu postgres $psql -c "drop database if exists ledgersmb"
    $sudo -Hiu postgres $createdb ledgersmb
    $sudo -Hiu postgres $psql -c "alter role postgres password 'postgres'"
    $sudo -Hiu postgres $psql -d ledgersmb < sql/Pg-database.sql
    for script in $($grep -vE '^#|^$' sql/changes/LOADORDER | $sed -e 's/!//')
    do
        $sudo -Hiu postgres psql -d ledgersmb < sql/changes/$script
    done
    for script in $($grep -vE '^#|^$' sql/modules/LOADORDER | $sed -e 's/!//')
    do
        $sudo -Hiu postgres $psql -d ledgersmb < sql/modules/$script
    done

    pushd doc/database
    $postgresql_autodoc -h localhost -d ledgersmb -U postgres --password=postgres
    popd

    $git add --all doc/database && $git commit -m "* Automated release schema update"
    popd
}

function update_translations {
    pushd "$our_workspace/$checkout_dir"
    trap "fail \"Failed to update branch ($branch) translations\"" ERR
    $tx pull -f -a && utils/devel/rebuild_pot.sh
    $find . -name '*~' -exec rm '{}' +
    $find . -name '*.orig' -exec rm '{}' +
    $git add --all $locale_paths
    $git commit -m "* Automated release language update"
    popd
}

function update_dockerfile {
    pushd "$docker_workspace/docker"
    trap "fail \"Failed to update Dockerfile!\"" ERR
    $sed -i -e "s/^ENV LSMB_VERSION .*\$/ENV LSMB_VERSION $release_version/
                s/^ARG LSMB_VERSION=.*\$/ARG LSMB_VERSION=\"$release_version\"/
                s/^ARG LSMB_DL_DIR=.*\$/ARG LSMB_DL_DIR=\"$prj_sub_dir\"/ " Dockerfile
    $git commit -a -m "* Automatic Dockerfile update by release process"
    $git tag "$release_version"
    popd
}

# 'detect_current_version' wants POSIX semantics: share variables
detect_current_version() {
   current_version=$(
     cd "$our_workspace/$checkout_dir"
     $sed -ne "/^our \$VERSION/ {
  s/^our \$VERSION = '\\(.*\\)';\$/\\1/
  p
}" "$LedgerSMBpm_path" )
   if [[ -z "$current_version" ]] ; then
     fail "Failed to detect current version!"
   fi
}

function version_to_regex {
   echo "$1" | $sed 's/\./\\./g'
}

# 'detect_versionpatch_files' wants POSIX semantics: share variables
detect_versionpatch_files() {
   versionpatch_regex=$(version_to_regex "$current_version")
   versionpatch_files=$(grep -lRE "$versionpatch_regex" "$our_workspace/$checkout_dir" | grep -v Changelog | grep -v sql/changes/)
   if [[ -z "$versionpatch_regex" || -z "$versionpatch_files" ]]; then
     fail "Failed to detect which files to patch for version update!"
   fi
}

function patch_version {
   version_regex=$(version_to_regex "$1")
   new_version=$2
   if ! $sed -i -e "s/$version_regex/$new_version/" $versionpatch_files ;
   then
       fail "Failed to patch files for version update!"
   fi
   if ! $sed -i -e "s/\"Project-Id-Version:.*/\"Project-Id-Version: LedgerSMB $new_version\\\\n\"/" "$our_workspace/$checkout_dir/locale/po"/*.po ;
   then
       fail "Failed to patch PO files for version update!"
   fi
}

function show_release_parameters {
clear
echo "
Please review details below!
Continuing will commit the diff shown and create a new version tag!


Release details
Git URL: $URL
Branch: $branch
Current version: $current_version
To be released: $release_version
Force-accept version update: $force_accept_version_update

Git config used for tag:
$($git config --list | $grep -E 'user.(email|name)')

Patched files:
$(echo "$versionpatch_files" | $sed -e "s#$our_workspace/$checkout_dir/##g")

Patch diff:
$(cd "$our_workspace/$checkout_dir" && $git diff )
" | $less

}

function commit_versionupdate {
    pushd "$our_workspace/$checkout_dir"
    trap "fail \"Failed to commit version update patch!\"" ERR
    $git commit -am "Update version $1" || [[ -n "$force_accept_version_update" ]]
    popd
}

function commit_versiontag {
    pushd "$our_workspace/$checkout_dir"
    trap "fail \"Failed to tag version $release_version!"\" ERR
    $git tag -m "$release_version" "$release_version"
    popd
}

function create_versiontarball {
    pushd "$our_workspace/$checkout_dir"
    trap "fail \"Failed to create release archive!\"" ERR
    $git checkout "$release_version"
    $make dist DIST_DIR=../ DIST_VER=$release_version
    popd
}

function sign_versiontarball {
   echo -n "Signing ledgersmb-$release_version.tar.gz\n"
   $gpg -u "$release_key" \
        -a -b "$our_workspace/ledgersmb-$release_version.tar.gz" \
       || fail "Failed to sign release archive!"
   echo "Succesfully signed release archive; directory content:

$(ls -lh "$our_workspace")
"
}

function build_pod {
    pushd "$our_workspace/$checkout_dir"
    trap "fail \"Failed to build Perl API docs!\"" ERR
    $make pod
    popd
}

function build_docker_images {
    pushd "$docker_workspace/docker"
    trap "fail \"Failed to build docker images\"" ERR
    $sudo $docker buildx build --build-arg "ARTIFACT_LOCATION=$staged_artifact" -t ledgersmb/ledgersmb:$branch .
    popd
}

function update_remote {
    pushd "$our_workspace/$checkout_dir"
    trap "fail \"Failed to update the origin repository!"\" ERR
    $git push --follow-tags origin "$branch"
    popd
}

function update_docker_remote {
    pushd "$docker_workspace/docker"
    trap "fail \"Failed to update remote docker repository!"\" ERR
    $git push --tags origin "$branch"
    popd
}

function stage_files_dl {
    pushd "$our_workspace"
    trap "fail \"Failed to upload files to download.ledgersmb.org!\"" ERR
    echo "mkdir '$upload_staging'
cd '$upload_staging'
put 'ledgersmb-$release_version.tar.gz.asc'
put 'ledgersmb-$release_version.tar.gz'
" | $sftp -b - "lsmb-uploader@download.ledgersmb.org"
    popd
}

function publish_docker_images {
    trap "fail \"Failed to publish docker images\"" ERR
    echo $docker_password | $docker login -u $docker_user --password-stdin
    $docker image tag ledgersmb/ledgersmb:$branch ledgersmb/ledgersmb:$release_version

    $docker image push ledgersmb/ledgersmb:$branch
    $docker image push ledgersmb/ledgersmb:$release_version

    pushd "$docker_workspace/docker"
    default_branch="$($git remote show origin | $awk '/HEAD branch/ {print $NF}' )"
    popd
    if [[ "$branch" == "$default_branch" ]]
    then
        $docker image tag ledgersmb/ledgersmb:$branch ledgersmb/ledgersmb:latest
        $docker image push ledgersmb/ledgersmb:latest
    fi
}

function publish_ghcr_images {
    trap "fail \"Failed to publish GitHub Container Repository images\"" ERR

    echo $ghcr_token | $docker login ghcr.io -u $ghcr_user --password-stdin
    $docker image tag ledgersmb/ledgersmb:$branch ghcr.io/ledgersmb/ledgersmb:$branch
    $docker image tag ledgersmb/ledgersmb:$branch ghcr.io/ledgersmb/ledgersmb:$release_version

    $docker image push ghcr.io/ledgersmb/ledgersmb:$branch
    $docker image push ghcr.io/ledgersmb/ledgersmb:$release_version

    pushd "$docker_workspace/docker"
    default_branch="$($git remote show origin | $awk '/HEAD branch/ {print $NF}' )"
    popd
    if [[ "$branch" == "$default_branch" ]]
    then
          $docker image tag ledgersmb/ledgersmb:$branch ghcr.io/ledgersmb/ledgersmb:latest
          $docker image push ghcr.io/ledgersmb/ledgersmb:latest
    fi
}

function publish_files_dl {
    trap "fail \"Failed to upload files to download.ledgersmb.org!\"" ERR

    echo "cd '$dl_base_dir/$prj_sub_dir'
mkdir '$release_version'
cd '$release_version'
rename '$upload_staging/ledgersmb-$release_version.tar.gz.asc' './ledgersmb-$release_version.tar.gz.asc'
rename '$upload_staging/ledgersmb-$release_version.tar.gz' './ledgersmb-$release_version.tar.gz'
rmdir '$upload_staging'
" | $sftp -b - "lsmb-uploader@download.ledgersmb.org"
}

function publish_files_gh {
   gh_auth="-u $github_user:$github_token"
   $curl -X POST $gh_auth "$GH_api/ledgersmb/LedgerSMB/releases" \
         -d "{\"tag_name\": \"$release_version\", \"name\": \"$release_version\", \"draft\": true, \"body\": \"todo\", \"name\": \"\"}" \
         > $our_workspace/release_create_response \
       || fail "Failed to create GitHub release!"
   upload_url=$($jq -M -r '.upload_url' < $our_workspace/release_create_response | $sed -e 's/{.*//')
   github_release_url=$($jq -M -r '.url' < $our_workspace/release_create_response)
   $curl -X POST -H 'Content-Type: text/plain' $gh_auth \
         "$upload_url?name=ledgersmb-$release_version.tar.gz.asc" \
         -T $our_workspace/ledgersmb-$release_version.tar.gz.asc \
       || fail "Failed to upload signature file to GitHub!"
   $curl -X POST -H 'Content-Type: application/x-tar' $gh_auth \
         "$upload_url?name=ledgersmb-$release_version.tar.gz" \
         -T $our_workspace/ledgersmb-$release_version.tar.gz \
       || fail "Failed to upload tarball to GitHub!"
}


# 'extract_changelog_internal' wants POSIX semantics: share variables
extract_changelog_internal() {
   extract_version=${1:-$release_version}
   escaped_version=$(echo "$extract_version" | $sed -e 's/\./\./g')
   extracted_changelog=$(cd "$our_workspace/$checkout_dir" && \
     $awk "
BEGIN {
   matched=0;
   printing=0;
}
/Changelog for/ {
   printing=0;
}
/Changelog for $escaped_version/ {
   if(!matched) {
       matched=1;
       printing=1;
   }
}
{
   if (printing) {
       print;
   }
}" Changelog)
}

# 'extract_changelog' wants POSIX semantics: share variables
extract_changelog() {
   extract_changelog_internal

   if [[ -z $extracted_changelog && \
         -n $(echo "$release_version" | $grep -- "-rc") ]] ; then
     extract_changelog_internal $(echo "$release_version" | $sed -e 's/-rc.*//')
  fi
}

# 'extract_sha256sum' wants POSIX semantics: share variables
extract_sha256sum() {
   extracted_sha256sums=$(cd "$our_workspace" && \
     $sha256sum ledgersmb-$release_version.tar.gz* )
}

function upload_pod {
    pushd "$our_workspace/$checkout_dir"
    trap "fail \"Failed to upload Perl API docs!\"" ERR
    $scp -q -r UI/pod/ lsmb-uploader@docs.ledgersmb.org:$pod_base_dir/$release_version/
    popd
}


process_arguments "$@"
load_configuration
verify_dependencies

if [[ -n "$debug_script" ]]
then
    set -x
fi

verify_release_key
setup_workspace
populate_workspace
populate_docker_workspace

if [[ -z $(echo "$release_version" | grep -- "-") ]]; then
    prj_sub_dir="$dl_tagged_dir"
else
    prj_sub_dir="$dl_untagged_dir"
fi
if [[ -z "$(cd "$our_workspace/$checkout_dir"; $git tag | grep -E "^$release_version$")" ]]
then

  if [[ "$release_version" == "$branch.0" ]]; then
    update_database_schema
  fi

  update_translations
  if [[ "$with_docker" == "yes" ]]; then
    update_dockerfile
  fi
  detect_current_version
  detect_versionpatch_files
  patch_version "$current_version" "$release_version"

  show_release_parameters
  commit_versionupdate
  commit_versiontag
  patch_version "$release_version" "$new_dev_version"
  commit_versionupdate '

[skip ci]'
else
  tag_release="N"
fi

create_versiontarball
sign_versiontarball
extract_changelog
extract_sha256sum

rm -f $release_parameter_file

add_release_parameter 'our_workspace' "$our_workspace"
add_release_parameter 'release_branch' "$branch"
add_release_parameter 'release_version' "$release_version"
add_release_parameter 'release_date' "$(date --iso --utc)"
add_release_parameter 'release_sha256sums' "$extracted_sha256sums"


build_pod

staging_uuid=$($uuid)
upload_staging="$dl_base_dir/../staging/$staging_uuid"
add_release_parameter 'staging_uuid'  "$staging_uuid"

stage_files_dl
staged_artifact="https://download.ledgersmb.org/staging/$staging_uuid/ledgersmb-$release_version.tar.gz"
add_release_parameter 'staged_artifact'  "$staged_artifact"
if [[ "$with_docker" == "yes" ]]; then
    build_docker_images
fi



$cat <<EOT >> $release_parameter_file
#release_branch=$branch
#release_version=$release_version
#release_date=$($date --iso --utc)
#release_sha256sums="\$($cat <<'EOF'
#$extracted_sha256sums
#EOF
#)"

#release_changelog="\$($cat <<'EOF'
#$extracted_changelog
#EOF
#)"
EOT


# We have the signed binaries now and are about to publish;
# if anything goes wrong beyond this point, we need the
# binaries to restart the process "by hand" or even to
# execute it by hand
trap - TERM EXIT

typeset -u yn
echo -n "Ready to publish $release_version now. Proceed? [y/N] "
read yn
if [[ "$yn" != "Y" ]]; then

    $cat - <<-EOF
	Release artifacts left:

	  LedgerSMB workspace: $our_workspace
	  Docker workspace:    $docker_workspace
	  Upload staging area: ${upload_staging:-(none)}
	EOF
    fail "Aborted by user!"
fi

if [[ "$tag_release" == "Y" ]]; then
    echo "Pushing changes to repository"
    update_remote
fi
if [[ "$with_docker" == "yes" ]]
then
    echo "Pushing docker updates"
    update_docker_remote
fi
publish_files_dl


if [[ "$tag_release" == "Y" ]]; then
    echo "Uploading POD documentation"
    upload_pod

    # we can't upload to GitHub if there's no tag...
    echo "Updating GitHub tag with attachments"
    publish_files_gh
    add_release_parameter 'github_release_url' "$github_release_url"
fi
if [[ "$with_docker" == "yes" ]]
then
    echo "Uploading Docker images"
    publish_docker_images

    echo "Uploading GitHub Container Repository images"
    publish_ghcr_images
fi



rm -rf "$our_workspace"
rm -rf "$docker_workspace"

echo "DONE -- release successful"


exit 0

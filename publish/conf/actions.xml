<actions>
  <action name="skip" class="Workflow::Action::Null"/>
  <action name="next" class="Workflow::Action::Null" />
  <action name="create ledgersmb workspace"
          class="LedgerSMB::Releaser::Action::CreateWorkspace"
          context_key="our_workspace"
          clone_url="git@github.com:ledgersmb/LedgerSMB"
          clone_dir="ledgersmb" />
  <action name="create docker workspace"
          class="LedgerSMB::Releaser::Action::CreateWorkspace"
          context_key="docker_workspace"
          clone_url="git@github.com:ledgersmb/ledgersmb-docker"
          clone_dir="docker" />
  <action name="detect current version"
          class="LedgerSMB::Releaser::Action::DetectCurrentVersion" />
  <action name="detect LedgerSMB.pm path"
          class="LedgerSMB::Releaser::Action::DetectMainModulePath" />
  <action name="verify release key"
          class="LedgerSMB::Releaser::Action::RunCommand">
    <command><![CDATA[
[[ -n "$(gpg --list-secret-keys "B7626A90FA0F515B323C8F5C39A629558DA0AF10")" ]]
    ]]></command>
  </action>
  <action name="update database schema"
          class="LedgerSMB::Releaser::Action::RunCommand">
    <command><![CDATA[
cd "%our_workspace%/ledgersmb"

sudo -u postgres psql -c "drop database if exists ledgersmb"
sudo -u postgres psql -c "alter role postgres password 'postgres'"
sudo -u postgres createdb ledgersmb
sudo -u postgres psql -d ledgersmb < sql/Pg-database.sql
for script in $(grep -vE '^#|^$' sql/changes/LOADORDER | sed -e 's/!//')
do
  sudo -u postgres psql -d ledgersmb < sql/changes/$script
done
for script in $(grep -vE '^#|^$' sql/modules/LOADORDER | sed -e 's/!//')
do
  sudo -u postgres psql -d ledgersmb < sql/modules/$script
done

( cd doc/database
  postgresql_autodoc -h localhost -d ledgersmb -U postgres --password=postgres )

git add --all doc/database
git commit -m "* Automated release schema update"
    ]]></command>
  </action>

  <action name="update translations"
          class="LedgerSMB::Releaser::Action::RunCommand">
    <command><![CDATA[
cd "%our_workspace%/ledgersmb"

tx pull -f -a
utils/devel/rebuild_pot.sh
find . \( -name '*~' -o -name '*.orig' \) -exec rm '{}' +
git add --all locale
git commit -m "* Automated release language update"
]]></command>
  </action>

  <action name="update Dockerfile"
          class="LedgerSMB::Releaser::Action::RunCommand">
    <command><![CDATA[
cd "%docker_workspace%/docker"

sed -i -e "s/^ENV LSMB_VERSION .*\$/ENV LSMB_VERSION %release%/
           s/^ARG LSMB_VERSION=.*\$/ARG LSMB_VERSION=\"%release%\"/
           s/^ARG LSMB_DL_DIR=.*\$/ARG LSMB_DL_DIR=\"%download_dir%\"/ " \
    Dockerfile

git commit -a -m "* Automatic Dockerfile update by release process"
git tag "%release%"
]]></command>
  </action>


  <action name="calculate release variables"
          class="LedgerSMB::Releaser::Action::SetReleaseVars" />


  <action name="patch files for release"
          replace="current_version > release"
          exclude="^(Changelog|sql/changes/)"
          class="LedgerSMB::Releaser::Action::VersionPatchFiles" />

  <action name="patch files for new dev version"
          replace="release > next_version"
          exclude="^(Changelog|sql/changes/)"
          class="LedgerSMB::Releaser::Action::VersionPatchFiles" />

  <!-- action name="publish files for download"
       class="LedgerSMB::Releaser::Action::UploadArtifacts" / -->

  <action name="show release delta"
          class="LedgerSMB::Releaser::Action::RunCommand">
    <command><![CDATA[
cd "%our_workspace%/ledgersmb"


git diff | diffstat
git diff
]]></command>
  </action>


  <action name="commit release version update"
          class="LedgerSMB::Releaser::Action::RunCommand">
    <command><![CDATA[
cd "%our_workspace%/ledgersmb"

git commit -am "Update version"
]]></command>
  </action>


  <action name="commit development version update"
          class="LedgerSMB::Releaser::Action::RunCommand">
    <command><![CDATA[
cd "%our_workspace%/ledgersmb"

git commit -am "Update version

[skip ci]"
]]></command>
  </action>


  <action name="commit version tag"
          class="LedgerSMB::Releaser::Action::RunCommand">
    <command><![CDATA[
cd "%our_workspace%/ledgersmb"

git tag -m "%release%" "%release%"
]]></command>
  </action>


  <action name="upload pod"
          class="LedgerSMB::Releaser::Action::RunCommand">
    <command><![CDATA[
cd "%our_workspace%/ledgersmb"

scp -q -r UI/pod/ lsmb-uploader@docs.ledgersmb.org:/www/vhosts/docs.ledgersmb.org/public_html/perl-api/%release%/
]]></command>
  </action>


  <action name="upload release artifacts"
          class="LedgerSMB::Releaser::Action::RunCommand">
    <command><![CDATA[
cd "%our_workspace%"

curl -sS -u lsmb-uploader: --ftp-create-dirs -T "ledgersmb-%release%.tar.gz{,.asc}" \
   'sftp://download.ledgersmb.org/www/vhosts/download.ledgersmb.org/public_html/f/%download_dir%/%release%/'
]]></command>
  </action>


  <action name="calculate digests"
          class="LedgerSMB::Releaser::Action::CalculateDigests" />


  <action name="create tarball"
          class="LedgerSMB::Releaser::Action::RunCommand">
    <command><![CDATA[
cd "%our_workspace%/ledgersmb"

git checkout "%release%"
make dist DIST_DIR=../ DIST_VER="%release%"
]]></command>
  </action>


  <action name="create github release"
          class="LedgerSMB::Releaser::Action::RunCommand">
    <command><![CDATA[
cd "%our_workspace%"
gh_auth="-u %github_user%:%github_token%"

curl -X POST $gh_auth "https://api.github.com/repos/ledgersmb/LedgerSMB/releases" \
     -d '{"tag_name":"%release%","name":"%release%","draft":false,"body":"todo"}' \
     > github_release_create_response
]]></command>
  </action>


  <action name="github upload signature file"
          class="LedgerSMB::Releaser::Action::RunCommand">
    <command><![CDATA[
cd "%our_workspace%"
gh_auth="-u %github_user%:%github_token%"

upload_url=$(jq -M -r '.upload_url' < release_create_response | sed -e 's/{.*//')
curl -X POST $gh_auth -H 'Content-Type: text/plain' \
     "$upload_url?name=ledgersmb-%release%.tar.gz.asc" \
     -T ledgersmb-%release%.tar.gz.asc
]]></command>
  </action>


  <action name="github upload tarball"
          class="LedgerSMB::Releaser::Action::RunCommand">
    <command><![CDATA[
cd "%our_workspace%"
gh_auth="-u %github_user%:%github_token%"

upload_url=$(jq -M -r '.upload_url' < release_create_response | sed -e 's/{.*//')
curl -X POST $gh_auth -H 'Content-Type: application/x-tar' \
     "$upload_url?name=ledgersmb-%release%.tar.gz" \
     -T ledgersmb-%release%.tar.gz
]]></command>
  </action>


</actions>

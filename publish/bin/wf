#!/usr/bin/env perl

use v5.24;
use strict;
use warnings;
use utf8;

use FindBin qw($Bin);
use lib "$Bin/../lib";

use Getopt::Long;
use Log::Log4perl qw(:easy);
use Workflow;
use Workflow::Factory qw( FACTORY );

my $config_dir = "$Bin/../conf";

FACTORY()->add_config_from_file(
    workflow  => "$config_dir/workflow.xml",
    action    => "$config_dir/actions.xml",
    condition => "$config_dir/conditions.xml",
    persister => "$config_dir/persister.xml",
    );


my @ctx_overrides = ();

sub wf_option {
    my ( $option, $value ) = @_;

    push @ctx_overrides, [ $option => $value ];
}

GetOptions(
    'force-tag' => \&wf_option,
    'workflow=s'  => \my $workflow,
    'debug'       => \my $debug,
    );

if ($debug) {
    Log::Log4perl->easy_init($DEBUG);
}
else {
    Log::Log4perl->easy_init($INFO);
}

my $wf;
if (not $workflow) {
    my ( $branch, $release, $uploader ) = @ARGV;
    my $ctx = Workflow::Context->new;

    $ctx->param( branch   => $branch );
    $ctx->param( release  => $release );
    $ctx->param( uploader => $uploader );
    $ctx->param( $_->@* ) for @ctx_overrides;

    $wf = FACTORY()->create_workflow( 'release', $ctx );

    eval {
        $wf->execute_action( 'next' );
    };
    print "$@\n" if $@;
}
else {
    $wf = FACTORY()->fetch_workflow( 'release', $workflow );
    my $ctx = $wf->context;

    my $cmd = pop @ARGV;
    if ($cmd eq 'cleanup') {
        my $our_workspace    = $ctx->param( 'our_workspace' );
        my $docker_workspace = $ctx->param( 'docker_workspace' );

        if (-d $docker_workspace) {
            system('rm', '-rf', $docker_workspace)
                and warn "Error removing path '$docker_workspace': $?";
        }
        else {
            say "No docker workspace to remove ('$docker_workspace' doesn't exist)";
        }
        if (-d $our_workspace) {
            system('rm', '-rf', $our_workspace)
                and warn "Error removing path '$our_workspace': $?";
        }
        else {
            say "No workspace to remove ('$our_workspace' doesn't exist)";
        }
    }
    else {
        $ctx->param( $_->@* ) for @ctx_overrides;

        my @actions = $wf->get_current_actions();

        if (scalar @actions == 1) {
            $wf->execute_action( $actions[0] );
        }
        elsif (scalar @actions == 0) {
            die "No actions available for workflow in state " . $wf->state;
        }
        else {
            die "Too many available actions to run workflow";
        }
    }
}


unless ($wf->state eq 'DONE') {
    say "Workflow didn't run to completion. Use " . $wf->id . " to restart";

    exit 1;
}


exit 0;
